<?xml version="1.0" encoding="UTF-8"?>
<project name="Java Polyline Encoder Server" default="check" basedir=".">
	<description>Java Polyline Encoder Server can encode different input formats to different output formats</description>

	<property file="build.properties" />

	<path id="classpath">
		<fileset dir="${lib.dir}">
			<include name="main/*.jar" />
			<include name="unittests/*.jar" />
		</fileset>
	</path>

	<target name="clean" description="Remove all files created by the build/test process.">
		<delete dir="${classes.dir}">
			<exclude name="README.md"/>
		</delete>
		
		<delete dir="${reports.dir}">
			<exclude name="README.md"/>
		</delete>

		<delete dir="${temp.dir}">
			<exclude name="README.md"/>
		</delete>
		
		<delete dir="${build.dir}" />

		<delete file="${cobdata}" />
		<delete dir="${inst.dir}" />
		<delete dir="${cob.rep}" />
	</target>

	<target name="clean_after" description="Remove files that have been created while testing and are unnecessary">
		<delete dir="${temp.dir}">
			<exclude name="README.md"/>
		</delete>
	</target>

	<target name="init" description="Prepare needed directories">
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${reports.dir}" />
		<mkdir dir="${reports.xml.dir}" />
		<mkdir dir="${reports.html.dir}" />

		<mkdir dir="${inst.dir}" />
		<mkdir dir="${cob.rep.html}" />
		<mkdir dir="${cob.rep.xml}" />
	</target>

	<target name="compile" depends="init">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" debug="yes" includeantruntime="false">
			<classpath refid="classpath" />
		</javac>
		<javac srcdir="${test.dir}" destdir="${classes.dir}" debug="yes" includeantruntime="false">
			<classpath refid="classpath" />
		</javac>
	</target>

	<target name="compileonly" depends="init">
		<javac srcdir="${src.dir}" destdir="${classes.dir}" debug="yes" includeantruntime="false">
			<classpath refid="classpath" />
		</javac>
	</target>

	<target name="test" depends="compile">
		 <junit>
		 	<sysproperty key="net.sourceforge.cobertura.datafile" file="${cobdata}" />
		 	<classpath location="${inst.dir}" />
		 	<classpath location="${classes.dir}" />
			<classpath refid="classpath" />

		 	<formatter type="brief" usefile="false" />

		 	<formatter type="xml" />
		 	<batchtest fork="yes" todir="${reports.xml.dir}">
				<fileset dir="${test.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		 </junit>
		<junitreport>
			<fileset dir="${reports.xml.dir}">
				<include name="TEST*.xml" />
			</fileset>
			<report format="frames" todir="${reports.html.dir}" />
		</junitreport>
	</target>

	<taskdef classpathref="classpath" resource="tasks.properties" />

	<target name="cob-instr" depends="compile">
		<cobertura-instrument todir="${inst.dir}" datafile="${cobdata}">
		    <fileset dir="${classes.dir}">
		        <include name="**/*.class" />
		        <exclude name="**/*Test.class" />
		        <exclude name="**/*Suite.class" />
		    </fileset>
		</cobertura-instrument>
	</target>

	<target name="cob-rep" depends="cob-instr, test" description="erzeugt Cobertura Reports">
		<cobertura-report format="html" datafile="${cobdata}" destdir="${cob.rep.html}" srcdir="${src.dir}" />
		<cobertura-report format="xml" datafile="${cobdata}" destdir="${cob.rep.xml}" srcdir="${src.dir}" />
	</target>

	<target name="check" depends="clean, cob-rep, clean_after" description="Clean and create cobertura reports">
	</target>

	<target name="jar" description="Build the distribution .jar file" depends="compileonly">
		<copy todir="${target.dir}">
			<fileset dir="${classes.dir}">
				<include name="*/**" />
				<exclude name="*/*.md" />
			</fileset>
		</copy>

		<copy todir="${build.dir}/libs">
			<fileset dir="${lib.dir}/main">
				<include name="*" />
			</fileset>
		</copy>

		<mkdir dir="${build.dir}/temp" />
		<copy todir="${build.dir}/templates">
			<fileset dir="templates">
				<include name="*/**" />
			</fileset>
		</copy>

		<pathconvert property="libs" pathsep=" ">
			<mapper>
				<chainedmapper>
				<flattenmapper />
				<globmapper from="*" to="libs/*" />
				</chainedmapper>
			</mapper>
			<path>
				<fileset dir="${lib.dir}">
					<include name="main/*.jar" />
				</fileset>
			</path>
		</pathconvert>

		<jar destfile="${build.dir}/PolylineEncoderServer.jar">
			<fileset dir="${target.dir}"/>
			<manifest>
				<attribute name="Manifest-Version" value="1.0" />
				<attribute name="Main-Class" value="de.fhb.polyencoder.JavaPolylineEncoder2"/>
				<attribute name="Class-Path" value=". ${libs}"/>
			</manifest>
		</jar>

		<delete dir="${target.dir}"/>
	</target>
</project>